@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using MudBlazor.Extensions
@using MudExtensions.Utilities

<MudGrid Class="cursor-default">
    <MudItem xs="12" sm="8" Class="d-flex align-center">
        <MudStepper @ref="_stepper" Class="mud-width-full" ContentStyle="min-height: 400px" Linear="_linear" Vertical="_vertical" Color="_color" Variant="_variant"
                    DisableAnimation="_disableAnimation" DisablePreviousButton="_disablePreviousButton" DisableNextButton="_disableNextButton" 
                    DisableSkipButton="_disableSkipButton" DisableStepResultIndicator="_disableStepResultIndicator" HeaderTextView="_headerTextView"
                    PreventStepChangeAsync="new Func<StepChangeDirection, Task<bool>>(CheckChange)" LocalizedStrings="GetLocalizedStrings()"
                    MobileView="_mobileView" IconActionButtons="_iconActionButtons" Loading="_loading" HeaderSize="_headerSize">
            <StaticContent>
                @if (_showStaticContent)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        <MudAvatar Color="_color">ST</MudAvatar>
                        <MudText>This is a static content which shows with each step.</MudText>
                    </MudStack>
                }
            </StaticContent>
            <ChildContent>
                <MudStep Icon="@Icons.Material.Filled.Approval" Title="Customer Info" StatusChanged="StatusChanged">    
                    <ChildContent>
                        <MudForm @ref="_form">
                            <MudStack>
                                <MudTextField T="string" Label="Name" Variant="_variant" Required="true" />
                                <MudTextField T="string" Label="Last Name" Variant="_variant" />
                                <MudTextField T="string" Label="Adress" Variant="_variant" />
                            </MudStack>
                        </MudForm>
                    </ChildContent>
                </MudStep>
                <MudStep Title="Booking Spec." Icon="@Icons.Material.Filled.MoreVert" Optional="true">
                    <ChildContent>
                        <MudCheckBox T="bool" Label="Early Check-in" Color="_color" />
                        <MudCheckBox T="bool" Label="Late Check-out" Color="_color" />
                        <MudCheckBox T="bool" Label="Twin Bed" Color="_color" />
                    </ChildContent>
                </MudStep>
                <MudStep Icon="@Icons.Material.Filled.Money" Title="Payment">
                    <ChildContent>
                        <MudForm @ref="_form2">
                            <MudStack>
                                <MudTextField T="string" Label="Card Number" Variant="_variant" Required="true" />
                                <MudStack Row="true">
                                    <MudTextField T="string" Label="Expire Date" Variant="_variant" Required="true" />
                                    <MudTextField T="string" Label="CVC" Variant="_variant" Required="true" />
                                </MudStack>
                            </MudStack>
                        </MudForm>
                    </ChildContent>
                </MudStep>

                @if (_addResultStep)
                {
                    <MudStep Icon="@Icons.Material.Filled.Alarm" Title="Result Step" IsResultStep="true">
                        <ChildContent>
                            <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                                <MudIconButton Icon="@Icons.Material.Filled.DoneAll" Size="Size.Large" Variant="Variant.Filled" Color="Color.Success" />
                                <MudText>Your reservation succesfully completed.</MudText>
                            </div>
                        </ChildContent>
                    </MudStep>
                }
            </ChildContent>
            <ActionContent>
                @if (!_stepper.IsAllStepsCompleted() && _showCustomButton)
                {
                    <MudButton Color="Color.Secondary" Variant="_variant" OnClick="@(() => Snackbar.Add("Custom cancel button clicked.", Severity.Info))">Cancel</MudButton>
                }
                <MudSpacer />
            </ActionContent>
        </MudStepper>
    </MudItem>

    <MudItem xs="12" sm="4" Style="box-shadow: rgba(240, 46, 170, 0.4) -3px 3px;">
        <MudStack Spacing="4">
            <MudNumericField @bind-Value="_activeIndex" Label="Change ActiveIndex" @bind-Value:after="(() => _stepper.SetActiveStepByIndex(_activeIndex))" Variant="Variant.Outlined" Margin="Margin.Dense" />
            <MudCheckBox @bind-Checked="_vertical" Color="Color.Secondary" Label="Vertical" Dense="true" />
            <MudCheckBox @bind-Checked="_linear" Color="Color.Secondary" Label="Linear" Dense="true" />
            <MudCheckBox @bind-Checked="_disableAnimation" Color="Color.Secondary" Label="Disable Animation" Dense="true" />
            <MudCheckBox @bind-Checked="_disablePreviousButton" Color="Color.Secondary" Label="Disable Previous Step Action Button" Dense="true" />
            <MudCheckBox @bind-Checked="_disableNextButton" Color="Color.Secondary" Label="Disable Next Step Action Button" Dense="true" />
            <MudCheckBox @bind-Checked="_disableSkipButton" Color="Color.Secondary" Label="Disable Skip Step Action Button" Dense="true" />
            <MudCheckBox @bind-Checked="_disableStepResultIndicator" Color="Color.Secondary" Label="Disable Step Result Indicator" Dense="true" />
            <MudSwitchM3 @bind-Checked="_mobileView" Color="Color.Secondary" Label="Mobile View" />
            <MudSwitchM3 @bind-Checked="_iconActionButtons" Color="Color.Secondary" Label="IconActionButtons" />
            <MudSwitchM3 @bind-Checked="_addResultStep" Color="Color.Secondary" Label="Has Result Step" />
            <MudSwitchM3 @bind-Checked="_checkValidationBeforeComplete" Color="Color.Secondary" Label="Check Validation Before Complete Step" />
            <MudSwitchM3 @bind-Checked="_customLocalization" Color="Color.Secondary" Label="Custom Localization (German)" />
            <MudSwitchM3 @bind-Checked="_showStaticContent" Color="Color.Secondary" Label="Show Some Static Content" />
            <MudSwitchM3 @bind-Checked="_showCustomButton" Color="Color.Secondary" Label="Show Custom Button" />
            <MudSelect @bind-Value="_variant" Variant="Variant.Outlined" Label="Variant" Margin="Margin.Dense" Dense="true">
                @foreach (Variant item in Enum.GetValues<Variant>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_color" Variant="Variant.Outlined" Label="Color" Margin="Margin.Dense" Dense="true">
                @foreach (Color item in Enum.GetValues<Color>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_headerTextView" Variant="Variant.Outlined" Label="Header Text View" Margin="Margin.Dense" Dense="true">
                @foreach (HeaderTextView item in Enum.GetValues<HeaderTextView>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelectExtended @bind-Value="_headerSize" ItemCollection="@(Enum.GetValues<Size>())" Variant="Variant.Outlined" Label="Header Size" Margin="Margin.Dense" Dense="true" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => _stepper.Reset())">Reset</MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    MudStepper _stepper;
    MudForm _form;
    MudForm _form2;
    bool _checkValidationBeforeComplete = false;
    bool _linear;
    bool _mobileView;
    bool _iconActionButtons;
    Variant _variant = Variant.Filled;
    HeaderTextView _headerTextView = HeaderTextView.All;
    bool _disableAnimation = false;
    bool _disablePreviousButton = false;
    bool _disableNextButton = false;
    bool _disableSkipButton = false;
    bool _disableStepResultIndicator = false;
    bool _addResultStep = true;
    bool _customLocalization = false;
    Color _color = Color.Primary;
    int _activeIndex = 0;
    bool _loading;
    bool _showStaticContent = false;
    bool _showCustomButton = false;
    bool _vertical = false;
    Size _headerSize = Size.Medium;

    private async Task<bool> CheckChange(StepChangeDirection direction)
    {
        if (_checkValidationBeforeComplete == true)
        {
            // Always allow stepping backwards, even if forms are invalid
            if (direction == StepChangeDirection.Backward)
            {
                return false;
            }
            if (_stepper.GetActiveIndex() == 0)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                await _form.Validate();
                _loading = false;
                StateHasChanged();
                return !_form.IsValid;
            }
            else if (_stepper.GetActiveIndex() == 2)
            {
                _loading = true;
                StateHasChanged();
                await Task.Delay(1000);
                await _form2.Validate();
                _loading = false;
                StateHasChanged();
                return !_form2.IsValid;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    private void StatusChanged(StepStatus status)
    {
        Snackbar.Add($"First step {status.ToDescriptionString()}.", Severity.Info);
    }

    private StepperLocalizedStrings GetLocalizedStrings()
    {
        if (_customLocalization == false)
        {
            return new StepperLocalizedStrings();
        }
        else
        {
            return new StepperLocalizedStrings()
            {
                Completed = "Abgeschlossen",
                Finish = "Fertig",
                Next = "Nächste",
                Optional = "Optional",
                Previous = "Früher",
                Skip = "überspringen",
                Skipped = "übersprungen",
            };
        }
    }
}

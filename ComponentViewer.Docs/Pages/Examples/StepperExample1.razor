@inject ISnackbar Snackbar
@using MudBlazor.Extensions
@using MudExtensions.Utilities

<MudGrid Class="cursor-default">
    <MudItem xs="12" sm="8">
        <MudStepper @ref="_stepper" ContentStyle="min-height: 400px" Linear="_linear" Vertical="_vertical" Color="_color" Variant="_variant" DisableAnimation="_disableAnimation" HeaderTextView="_headerTextView"
                    PreventStepChange="new Func<StepChangeDirection, bool>(CheckChange)" LocalizedStrings="GetLocalizedStrings()">

            <MudStep Title="Customer Info" StatusChanged="StatusChanged">
                <MudForm @ref="_form">
                    <MudStack>
                        <MudTextField T="string" Label="Name" Variant="_variant" Required="true" />
                        <MudTextField T="string" Label="Last Name" Variant="_variant" />
                        <MudTextField T="string" Label="Adress" Variant="_variant" />
                    </MudStack>
                </MudForm>
            </MudStep>
            <MudStep Title="Booking Spec." Optional="true">
                <MudCheckBox T="bool" Label="Early Check-in" Color="_color" />
                <MudCheckBox T="bool" Label="Late Check-out" Color="_color" />
                <MudCheckBox T="bool" Label="Twin Bed" Color="_color" />
            </MudStep>
            <MudStep Title="Payment">
                <MudForm @ref="_form2">
                    <MudStack>
                        <MudTextField T="string" Label="Card Number" Variant="_variant" Required="true" />
                        <MudStack Row="true">
                            <MudTextField T="string" Label="Expire Date" Variant="_variant" Required="true" />
                            <MudTextField T="string" Label="CVC" Variant="_variant" Required="true" />
                        </MudStack>
                    </MudStack>
                </MudForm>
            </MudStep>

            @if (_addResultStep)
            {
                <MudStep Title="Result Step" IsResultStep="true">
                    <div class="d-flex flex-column align-center justify-center" style="height: 200px">
                        <MudIconButton Icon="@Icons.Filled.DoneAll" Size="Size.Large" Variant="Variant.Filled" Color="Color.Success" />
                        <MudText>Your reservation succesfully completed.</MudText>
                    </div>
                </MudStep>
            }
        </MudStepper>
    </MudItem>

    <MudItem xs="12" sm="4" Style="box-shadow: rgba(240, 46, 170, 0.4) -3px 3px;">
        <MudStack Spacing="4">
            <MudCheckBox @bind-Checked="_linear" Color="Color.Primary" Label="Linear" Dense="true" />
            <MudCheckBox @bind-Checked="_disableAnimation" Color="Color.Primary" Label="Disable Animation" Dense="true" />
            <MudSwitch @bind-Checked="_addResultStep" Color="Color.Primary" Label="Has Result Step" />
            <MudSwitch @bind-Checked="_checkValidationBeforeComplete" Color="Color.Primary" Label="Check Validation Before Complete Step" />
            <MudSwitch @bind-Checked="_customLocalization" Color="Color.Primary" Label="Custom Localization (German)" />
            <MudSelect @bind-Value="_variant" Variant="Variant.Outlined" Label="Variant">
                @foreach (Variant item in Enum.GetValues<Variant>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_color" Variant="Variant.Outlined" Label="Color">
                @foreach (Color item in Enum.GetValues<Color>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="_headerTextView" Variant="Variant.Outlined" Label="Header Text View">
                @foreach (HeaderTextView item in Enum.GetValues<HeaderTextView>())
                {
                    <MudSelectItem Value="item">@item.ToDescriptionString()</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => _stepper.Reset())">Reset</MudButton>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    MudStepper _stepper;
    MudForm _form;
    MudForm _form2;
    bool _checkValidationBeforeComplete = false;
    bool _linear;
    Variant _variant = Variant.Filled;
    HeaderTextView _headerTextView = HeaderTextView.All;
    bool _disableAnimation = false;
    bool _addResultStep = true;
    bool _customLocalization = false;
    Color _color = Color.Primary;

    private bool CheckChange(StepChangeDirection direction)
    {
        if (_checkValidationBeforeComplete == true)
        {
            // Always allow stepping backwards, even if forms are invalid
            if (direction == StepChangeDirection.Backward)
            {
                return false;
            }
            if (_stepper.GetActiveIndex() == 0)
            {
                _form.Validate();
                return !_form.IsValid;
            }
            else if (_stepper.GetActiveIndex() == 2)
            {
                _form2.Validate();
                return !_form2.IsValid;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    private void StatusChanged(StepStatus status)
    {
        Snackbar.Add($"First step {status.ToDescriptionString()}.", Severity.Info);
    }

    private StepperLocalizedStrings GetLocalizedStrings()
    {
        if (_customLocalization == false)
        {
            return new StepperLocalizedStrings();
        }
        else
        {
            return new StepperLocalizedStrings()
            {
                Completed = "Abgeschlossen",
                Finish = "Fertig",
                Next = "Nächste",
                Optional = "Optional",
                Previous = "Früher",
                Skip = "überspringen",
                Skipped = "übersprungen",
            };
        }
    }
}

@namespace MudExtensions
@using System.Text
@using MudExtensions.Enums
@using MudExtensions.Utilities
@inherits MudComponentBase

@code {
    /// <summary>
    /// The hex value of primary color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Primary { get; set; }

    /// <summary>
    /// The hex value of secondary color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Secondary { get; set; }

    /// <summary>
    /// The hex value of tertiary color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Tertiary { get; set; }

    /// <summary>
    /// The hex value of neutral color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Neutral { get; set; }

    /// <summary>
    /// The hex value of neutral variant color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string NeutralVariant { get; set; }

    /// <summary>
    /// The hex value of error color.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Error { get; set; }

    /// <summary>
    /// The hex values of custom colors.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public Dictionary<string, string> CustomColors { get; set; } = new Dictionary<string, string>();

    /// <summary>
    /// The color shade between 0 (black) and 100 (white). Default is 40 (20 for dark mode). If its on default, the value will change automatically for dark mode.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public int MainTone { get; set; } = 40;

    /// <summary>
    /// The color shade between 0 (black) and 100 (white) for container colors. Default is 90 (30 for dark mode). If its on default, the value will change automatically for dark mode.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public int ContainerTone { get; set; } = 90;

    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public bool DarkMode { get; set; }

    /// <summary>
    /// If true, the current CSS variables also be overriden (--mud-palette-primary etc.). Default is false.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public bool Override { get; set; }
}

<style>
    :root {
        @for (int i = 10; i < 100; i = i + 10)
        {
            int a = i;
            @($"--mud-primary-{a}: {GetRGBString(Primary, a)};")
            @($"--mud-secondary-{a}: {GetRGBString(Secondary, a)};")
            @($"--mud-tertiary-{a}: {GetRGBString(Tertiary, a)};")
            @($"--mud-error-{a}: {GetRGBString(Error, a)};")
            @($"--mud-neutral-{a}: {GetRGBString(Neutral, a)};")
            @($"--mud-neutralvariant-{a}: {GetRGBString(NeutralVariant, a)};")

            @foreach(var customColor in CustomColors)
            {
                @($"--mud-{customColor.Key}-{a}: {GetRGBString(customColor.Value, a)};")
            }
        } 
        @($"--mud-primary-{MainTone}: {GetRGBString(Primary, MainTone)};") 
        @($"--mud-secondary-{MainTone}: {GetRGBString(Secondary, MainTone)};") 
        @($"--mud-tertiary-{MainTone}: {GetRGBString(Tertiary, MainTone)};")
        @($"--mud-neutral-{MainTone}: {GetRGBString(Neutral, MainTone)};")
        @($"--mud-neutralvariant-{MainTone}: {GetRGBString(NeutralVariant, MainTone)};")
        @($"--mud-error-{MainTone}: {GetRGBString(Error, MainTone)};") 
        @foreach(var customColor in CustomColors)
        {
        @($"--mud-{customColor.Key}-{MainTone}: {GetRGBString(customColor.Value, MainTone)};")
    }

        @($"--mud-primary-{ContainerTone}: {GetRGBString(Primary, ContainerTone)};") 
        @($"--mud-secondary-{ContainerTone}: {GetRGBString(Secondary, ContainerTone)};") 
        @($"--mud-tertiary-{ContainerTone}: {GetRGBString(Tertiary, ContainerTone)};") 
        @($"--mud-neutral-{ContainerTone}: {GetRGBString(Neutral, ContainerTone)};")
        @($"--mud-neutralvariant-{ContainerTone}: {GetRGBString(NeutralVariant, ContainerTone)};")
        @($"--mud-error-{ContainerTone}: {GetRGBString(Error, ContainerTone)};") 
        @foreach(var customColor in CustomColors)
        {
            @($"--mud-{customColor.Key}-{ContainerTone}: {GetRGBString(customColor.Value, ContainerTone)};")
        }

        @($"--mud-primary-{100 - ContainerTone}: {GetRGBString(Primary, 100 - ContainerTone)};") 
        @($"--mud-secondary-{100 - ContainerTone}: {GetRGBString(Secondary, 100 - ContainerTone)};") 
        @($"--mud-tertiary-{100 - ContainerTone}: {GetRGBString(Tertiary, 100 - ContainerTone)};")
        @($"--mud-neutral-{100 - ContainerTone}: {GetRGBString(Neutral, 100 - ContainerTone)};")
        @($"--mud-neutralvariant-{100 - ContainerTone}: {GetRGBString(NeutralVariant, 100 - ContainerTone)};")
        @($"--mud-error-{100 - ContainerTone}: {GetRGBString(Error, 100 - ContainerTone)};") 
        @foreach(var customColor in CustomColors)
        {
            @($"--mud-{customColor.Key}-{100 - ContainerTone}: {GetRGBString(customColor.Value, 100 - ContainerTone)};")
        }

        @($"--mud-primary-99: {GetRGBString(Primary, 99)};")
        @($"--mud-secondary-99: {GetRGBString(Secondary, 99)};")
        @($"--mud-tertiary-99: {GetRGBString(Tertiary, 99)};")
        @($"--mud-neutral-99: {GetRGBString(Neutral, 99)};")
        @($"--mud-neutralvariant-99: {GetRGBString(NeutralVariant, 99)};")
        @($"--mud-error-99: {GetRGBString(Error, 99)};") 
        @foreach(var customColor in CustomColors)
        {
            @($"--mud-{customColor.Key}-99: {GetRGBString(customColor.Value, 99)};")
        }

        --mud-primary-0: rgb(0, 0, 0);
        --mud-primary-100: rgb(255, 255, 255);
        --mud-secondary-0: rgb(0, 0, 0);
        --mud-secondary-100: rgb(255, 255, 255);
        --mud-tertiary-0: rgb(0, 0, 0);
        --mud-tertiary-100: rgb(255, 255, 255);
        --mud-neutral-0: rgb(0, 0, 0);
        --mud-neutral-100: rgb(255, 255, 255);
        --mud-neutralvariant-0: rgb(0, 0, 0);
        --mud-neutralvariant-100: rgb(255, 255, 255);
        --mud-error-0: rgb(0, 0, 0);
        --mud-error-100: rgb(255, 255, 255);
        @foreach(var customColor in CustomColors)
        {
            @($"--mud-{customColor.Key}-0: rgb(0, 0, 0);");
            @($"--mud-{customColor.Key}-100: rgb(255, 255, 255);");
        }


        --mud-m3-primary: var(--mud-primary-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-onprimary: var(--mud-primary-@(DarkMode ? "20" : "100"));
        --mud-m3-primary-container: var(--mud-primary-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-onprimary-container: var(--mud-primary-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        --mud-m3-secondary: var(--mud-secondary-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-onsecondary: var(--mud-secondary-@(DarkMode ? "20" : "100"));
        --mud-m3-secondary-container: var(--mud-secondary-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-onsecondary-container: var(--mud-secondary-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        --mud-m3-tertiary: var(--mud-tertiary-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-ontertiary: var(--mud-tertiary-@(DarkMode ? "20" : "100"));
        --mud-m3-tertiary-container: var(--mud-tertiary-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-ontertiary-container: var(--mud-tertiary-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        --mud-m3-neutral: var(--mud-neutral-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-onneutral: var(--mud-neutral-@(DarkMode ? "20" : "100"));
        --mud-m3-neutral-container: var(--mud-neutral-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-onneutral-container: var(--mud-neutral-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        --mud-m3-neutralvariant: var(--mud-neutralvariant-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-onneutralvariant: var(--mud-neutralvariant-@(DarkMode ? "20" : "100"));
        --mud-m3-neutralvariant-container: var(--mud-neutralvariant-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-onneutralvariant-container: var(--mud-neutralvariant-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        --mud-m3-error: var(--mud-error-@($"{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())}"));
        --mud-m3-onerror: var(--mud-error-@(DarkMode ? "20" : "100"));
        --mud-m3-error-container: var(--mud-error-@($"{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())}"));
        --mud-m3-onerror-container: var(--mud-error-@($"{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)}"));

        @foreach(var customColor in CustomColors)
        {
            @($"--mud-m3-{customColor.Key}: var(--mud-{customColor.Key}-{(MainTone == 40 && DarkMode == true ? "80" : MainTone.ToString())});");
            @($"--mud-m3-on{customColor.Key}: var(--mud-{customColor.Key}-{(DarkMode ? "20" : "100")});");
            @($"--mud-m3-{customColor.Key}-container: var(--mud-{customColor.Key}-{(ContainerTone == 90 && DarkMode == true ? "30" : ContainerTone.ToString())});");
            @($"--mud-m3-on{customColor.Key}-container: var(--mud-{customColor.Key}-{(ContainerTone == 90 && DarkMode == true ? "90" : 100 - ContainerTone)});");
        }


        @if (Override)
        {
            <MudRender>
                --mud-palette-primary: var(--mud-m3-primary) !important;
                --mud-palette-primary-text: var(--mud-m3-primary-container) !important;
                --mud-palette-secondary: var(--mud-m3-secondary) !important;
                --mud-palette-secondary-text: var(--mud-m3-secondary-container) !important;
                --mud-palette-tertiary: var(--mud-m3-tertiary) !important;
                --mud-palette-tertiary-text: var(--mud-m3-tertiary-container) !important;
                --mud-palette-error: var(--mud-m3-error) !important;
                --mud-palette-error-text: var(--mud-m3-error-container) !important;
                @foreach(var customColor in CustomColors)
                {
                    @($"--mud-palette-{customColor.Key}: var(--mud-m3-{customColor.Key}) !important;");
                    @($"--mud-palette-{customColor.Key}-text: var(--mud-m3-{customColor.Key}-container) !important;");
                }
            </MudRender>
        }
    }

    .mud-m3-theme-primary {
        color: var(--mud-m3-onprimary);
        background-color: var(--mud-m3-primary);
    }

    .mud-m3-theme-primary-reverse {
        color: var(--mud-m3-primary);
        background-color: var(--mud-m3-onprimary);
    }

    .mud-m3-theme-primary-container {
        color: var(--mud-m3-onprimary-container);
        background-color: var(--mud-m3-primary-container);
    }

    .mud-m3-theme-primary-container-reverse {
        color: var(--mud-m3-primary-container);
        background-color: var(--mud-m3-onprimary-container);
    }

    .mud-m3-theme-secondary {
        color: var(--mud-m3-onsecondary);
        background-color: var(--mud-m3-secondary);
    }

    .mud-m3-theme-secondary-reverse {
        color: var(--mud-m3-secondary);
        background-color: var(--mud-m3-onsecondary);
    }

    .mud-m3-theme-secondary-container {
        color: var(--mud-m3-onsecondary-container);
        background-color: var(--mud-m3-secondary-container);
    }

    .mud-m3-theme-secondary-container-reverse {
        color: var(--mud-m3-secondary-container);
        background-color: var(--mud-m3-onsecondary-container);
    }

    .mud-m3-theme-tertiary {
        color: var(--mud-m3-ontertiary);
        background-color: var(--mud-m3-tertiary);
    }

    .mud-m3-theme-tertiary-reverse {
        color: var(--mud-m3-tertiary);
        background-color: var(--mud-m3-ontertiary);
    }

    .mud-m3-theme-tertiary-container {
        color: var(--mud-m3-ontertiary-container);
        background-color: var(--mud-m3-tertiary-container);
    }

    .mud-m3-theme-tertiary-container-reverse {
        color: var(--mud-m3-tertiary-container);
        background-color: var(--mud-m3-ontertiary-container);
    }

    .mud-m3-theme-error {
        color: var(--mud-m3-onerror);
        background-color: var(--mud-m3-error);
    }

    .mud-m3-theme-error-reverse {
        color: var(--mud-m3-error);
        background-color: var(--mud-m3-onerror);
    }

    .mud-m3-theme-error-container {
        color: var(--mud-m3-onerror-container);
        background-color: var(--mud-m3-error-container);
    }

    .mud-m3-theme-error-container-reverse {
        color: var(--mud-m3-error-container);
        background-color: var(--mud-m3-onerror-container);
    }

    @foreach(var customColor in CustomColors)
    {
        @($".mud-m3-theme-{customColor.Key} {{ color: var(--mud-m3-on{customColor.Key});background-color: var(--mud-m3-{customColor.Key});}}");
        @($".mud-m3-theme-{customColor.Key}-reverse {{ color: var(--mud-m3-{customColor.Key});background-color: var(--mud-m3-on{customColor.Key});}}");
        @($".mud-m3-theme-{customColor.Key}-container {{ color: var(--mud-m3-on{customColor.Key}-container);background-color: var(--mud-m3-{customColor.Key}-container);}}");
        @($".mud-m3-theme-{customColor.Key}-container-reverse {{ color: var(--mud-m3-{customColor.Key}-container);background-color: var(--mud-m3-on{customColor.Key}-container);}}");
    }

</style>

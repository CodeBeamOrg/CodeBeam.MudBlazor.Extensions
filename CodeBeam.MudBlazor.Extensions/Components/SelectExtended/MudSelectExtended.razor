@namespace MudExtensions
@typeparam T
@inherits MudBaseInputExtended<T>
@using MudExtensions.Enums

<CascadingValue Name="Standalone" Value="false" IsFixed="true">
    <CascadingValue Value="@this" IsFixed="true">
        <div class="mud-select-extended" id="@_elementId">
            <MudInputControl Label="@Label" Variant="@Variant" HelperText="@HelperText" HelperTextOnFocus="@HelperTextOnFocus" FullWidth="@FullWidth" Margin="@Margin" Class="@Classname" Style="@Style"
                             Error="@Error" ErrorText="@ErrorText" ErrorId="@ErrorId" Disabled="@Disabled" @onclick="@ToggleMenu" Required="@Required" ForId="@FieldId">
                <InputContent>
                    <MudInputExtended @ref="_elementReference" InputType="InputType.Hidden" MockInputStyle="@(ValuePresenter == ValuePresenter.Chip ? "width: 0px" : null)"
                                      Class="@InputClassname" Style="@InputStyle" Margin="@Margin" Placeholder="@Placeholder"
                                      Variant="@Variant"
                                      TextUpdateSuppression="false"
                                      Value="@(Strict && !IsValueInList ? null : Text)" DisableUnderLine="@DisableUnderLine"
                                      Disabled="@Disabled" ReadOnly="true" Error="@Error" ErrorId="@ErrorId"
                                      Clearable="@Clearable" OnClearButtonClick="(async (e) => await SelectClearButtonClickHandlerAsync(e))"
                                      @attributes="UserAttributes" OnBlur="@OnLostFocus" ForceShrink="@ForceShrink">

                        <AdornmentEnd>
                            <MudIcon Icon="@_currentIcon" Color="@AdornmentColor" Size="@IconSize" @onclick="OnAdornmentClick" />
                        </AdornmentEnd>

                        <DataVisualiser>
                            @if (ValuePresenter == ValuePresenter.Chip)
                            {
                                <MudChipSet Class="d-flex flex-wrap mud-width-full" Style="row-gap: 4px" AllClosable="ChipCloseable" OnClose="ChipClosed">
                                    @if (ItemCollection != null)
                                    {
                                        foreach (var item in ItemCollection.Where(x => SelectedValues.Contains(x)))
                                        {
                                            <MudChip Class="@ChipClass" Value="@item" Text="@Converter.Set(item)" Color="@Color" Size="@ChipSize" Variant="@ChipVariant" />
                                        }
                                    }
                                    else
                                    {
                                        foreach (var item in Items?.Where(x => SelectedValues.Contains(x.Value)) ?? new List<MudSelectItemExtended<T>>())
                                        {
                                            <MudChip Class="@ChipClass" Value="item.Value" Text="@(string.IsNullOrEmpty(item.Text) ? Converter.Set(item.Value) : item.Text)" Color="@Color" Size="@ChipSize" Variant="@ChipVariant" />
                                        }
                                    }
                                </MudChipSet>
                            }
                        </DataVisualiser>

                        <ChildContent>
                            <div class="@TemplateClass">
                                @if (Strict && !IsValueInList)
                                {
                                    //Show nothing
                                    <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                }
                                else if (ValuePresenter == ValuePresenter.Text)
                                {
                                    @if (string.IsNullOrEmpty(Text))
                                    {
                                        <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                    }

                                    <MudRender>@GetSelectTextPresenter()</MudRender>
                                }
                                else if (ValuePresenter == ValuePresenter.Chip)
                                {
                                    if (SelectedValues == null || !SelectedValues.Any())
                                    {
                                        <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                    }
                                    else
                                    {
                                        @*Chips show under DataVisualiser RenderFragment*@
                                    }
                                }
                                else if (ValuePresenter == ValuePresenter.ItemContent)
                                {
                                    if (SelectedListItem == null)
                                    {
                                        <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>

                                    }
                                    else if (ItemTemplate != null)
                                    {
                                        if (SelectedListItem != null && SelectedListItem.Value != null)
                                        {
                                            @ItemTemplate(SelectedListItem)
                                        }
                                        else if (!string.IsNullOrEmpty(Placeholder))
                                        {
                                            <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                        }
                                    }
                                    else if (SelectedListItem.ChildContent != null)
                                    {
                                        <MudRender>@SelectedListItem.ChildContent</MudRender>
                                    }
                                    else
                                    {
                                        @if (string.IsNullOrEmpty(Text))
                                        {
                                            <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                        }

                                        <MudRender>@GetSelectTextPresenter()</MudRender>
                                    }
                                }
                            </div>
                        </ChildContent>
                    </MudInputExtended>

				<MudPopover Open="@_isOpen" MaxHeight="@MaxHeight" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Class="@PopoverClass" RelativeWidth="@RelativeWidth">
                        <CascadingValue Value="@this" IsFixed="true">
                            <MudListExtended @ref="@_list" T="T" @bind-SelectedValue="@Value" @bind-SelectedValues="@SelectedValues" @bind-SelectedItem="@SelectedListItem" @bind-SelectedItems="@SelectedListItems"
                                             Clickable="true" Color="@Color" Dense="@Dense" ItemCollection="@ItemCollection" Virtualize="@Virtualize" DisablePadding="@DisablePopoverPadding" DisableSelectedItemStyle="@DisableSelectedItemStyle"
                                             MultiSelection="@MultiSelection" MultiSelectionComponent="@MultiSelectionComponent" MultiSelectionAlign="@MultiSelectionAlign" SelectAll="@SelectAll" SelectAllPosition="@SelectAllPosition" SelectAllText="@SelectAllText"
                                             CheckedIcon="@CheckedIcon" UncheckedIcon="@UncheckedIcon" IndeterminateIcon="@IndeterminateIcon" SelectValueOnTab="@SelectValueOnTab" Comparer="@Comparer"
                                             ItemTemplate="@ItemTemplate" ItemSelectedTemplate="@ItemSelectedTemplate" ItemDisabledTemplate="@ItemDisabledTemplate" SearchBox="@SearchBox" SearchBoxAutoFocus="@SearchBoxAutoFocus" SearchFunc="@SearchFunc" SearchBoxPlaceholder="@SearchBoxPlaceholder" SearchBoxClearable="@SearchBoxClearable" ToStringFunc="@ToStringFunc">
                                @ChildContent
                            </MudListExtended>
                        </CascadingValue>
                    </MudPopover>
                </InputContent>
            </MudInputControl>
        </div>

        @*To Be Discussed as Second ShadowItems: Needed to render directly into select to has initial values*@

        <div style="display: none">
            <CascadingValue Value="@this" IsFixed="true">
                <MudListExtended T="T" @bind-SelectedValue="@Value" @bind-SelectedValues="@SelectedValues" @bind-SelectedItem="@SelectedListItem" @bind-SelectedItems="@SelectedListItems"
                                 Clickable="true" Color="@Color" Dense="@Dense" ItemCollection="@ItemCollection" Virtualize="@Virtualize" DisablePadding="@DisablePopoverPadding" DisableSelectedItemStyle="@DisableSelectedItemStyle"
                                 MultiSelection="@MultiSelection" MultiSelectionComponent="@MultiSelectionComponent" MultiSelectionAlign="@MultiSelectionAlign" SelectAll="@SelectAll" SelectAllPosition="@SelectAllPosition" SelectAllText="@SelectAllText"
                                 CheckedIcon="@CheckedIcon" UncheckedIcon="@UncheckedIcon" IndeterminateIcon="@IndeterminateIcon" SelectValueOnTab="@SelectValueOnTab" Comparer="@Comparer"
                                 ItemTemplate="@ItemTemplate" ItemSelectedTemplate="@ItemSelectedTemplate" ItemDisabledTemplate="@ItemDisabledTemplate" SearchBox="@SearchBox" SearchBoxAutoFocus="@SearchBoxAutoFocus" SearchFunc="@SearchFunc" SearchBoxPlaceholder="@SearchBoxPlaceholder" SearchBoxClearable="@SearchBoxClearable" ToStringFunc="@ToStringFunc">
                    @ChildContent
                </MudListExtended>
            </CascadingValue>
        </div>
    </CascadingValue>

    @*Shadow select items for IsValueInList and CanRenderValue*@
    <CascadingValue Value="@((IMudShadowSelectExtended)this)" IsFixed="true">
        <CascadingValue Name="HideContent" Value="true">
            @ChildContent
        </CascadingValue>
    </CascadingValue>



</CascadingValue>
<!-- mousedown instead of click needed to close the menu before OnLostFocus runs -->
<MudOverlay Visible="_isOpen" @onmousedown="@(() => CloseMenu())" LockScroll="@LockScroll" />

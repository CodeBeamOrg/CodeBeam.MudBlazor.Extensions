@namespace MudExtensions
@inherits MudBaseInput<DateTime?>
@using MudExtensions.Enums

<CascadingValue Name="SubscribeToParentForm" Value="false" IsFixed="true">
    <div>
        <MudInputControl Label="@Label" Variant="@Variant" HelperText="@HelperText" HelperTextOnFocus="@HelperTextOnFocus" FullWidth="@FullWidth" Margin="@Margin" Class="@Classname" Style="@Style"
                         Error="@Error" ErrorText="@ErrorText" ErrorId="@ErrorId" Disabled="@Disabled" @onclick="@(Editable ? null : ToggleMenu)" Required="@Required" ForId="@FieldId">
            <InputContent>
                <MudInput @ref="InputReference" Margin="@Margin" Placeholder="@Placeholder"
                          Variant="@Variant" InputType="InputType.Text"
                          TextUpdateSuppression="false"
                          Value="@(Text)" DisableUnderLine="@DisableUnderLine"
                          Disabled="@Disabled" ReadOnly="!Editable" Error="@Error" ErrorId="@ErrorId"
                          OnAdornmentClick="HandleAdornmentClick" AdornmentIcon="@_currentIcon" Adornment="Adornment.End"
                          AdornmentColor="@AdornmentColor" IconSize="@IconSize" OnBlur="HandleOnBlur"
                          Clearable="@Clearable" OnClearButtonClick="HandleClearButtonClick"
                          @attributes="UserAttributes" />
                <MudPopover Class="@PopoverClass" Style="@PopoverStyle" Open=@(_isOpen) MaxHeight="@MaxHeight" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" RelativeWidth="true">
                    @if (ShowToolbar || SubmitOnClose == false)
                    {
                        <div class="d-flex">
                            @if (SubmitOnClose == false)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Done" Color="@Color" OnClick="@(() => CloseMenu(true))" />
                            }
                            <MudSpacer />
                            @if (ShowToolbar)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Sync" Color="@Color" Disabled="@(DateView == DateView.Both)" OnClick="@(() => ToggleDateView())" />
                                <MudIconButton Icon="@(DateView == DateView.Both ? Icons.Material.Filled.ChevronLeft : Icons.Material.Filled.ChevronRight)" Color="@Color" OnClick="@(() => ExpandDateView())" />
                            }
                        </div>
                    }

                    <div class="d-flex">
                        @if (DateView == DateView.Date || DateView == DateView.Both)
                        {
                            string dateFormat = new string(DateFormat);

                            while (dateFormat.Length > 0)
                            {
                                switch (dateFormat[0])
                                {
                                    case 'd':
                                        <MudWheel Class="mud-width-full" @bind-Value="_day" ItemCollection="Days" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Day : null)" ToStringFunc="new Func<int, string>(NumberToString)" Dense="@Dense" Color="@Color" Disabled="FixDay" />
                                        break;
                                    case 'M':
                                        <MudWheel Class="mud-width-full" Value="_month" ValueChanged=@((int m) => OnMonthChanged(m)) ItemCollection="Months" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Month : null)" ToStringFunc="new Func<int, string>(NumberToString)" Dense="@Dense" Color="@Color" Disabled="FixMonth" />
                                        break;
                                    case 'y':
                                        <MudWheel Class="mud-width-full" @bind-Value="_year" ItemCollection="Years" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Year : null)" Dense="@Dense" Color="@Color" Disabled="FixYear" />
                                        break;
                                }

                                dateFormat = dateFormat.Replace(dateFormat[0].ToString(), string.Empty);
                            }
                        }
                        @if (DateView == DateView.Time || DateView == DateView.Both)
                        {
                            <MudWheel Class="mud-width-full" @bind-Value="_hour" ItemCollection="Hours" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Hour : null)" ToStringFunc="new Func<int, string>(NumberToString)" Dense="@Dense" Color="@(ColorTime == Color.Inherit ? Color : ColorTime)" Disabled="FixHour" />
                            <MudWheel Class="mud-width-full" @bind-Value="_minute" ItemCollection="Minutes" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Minute : null)" ToStringFunc="new Func<int, string>(NumberToString)" Dense="@Dense" Color="@(ColorTime == Color.Inherit ? Color : ColorTime)" Disabled="FixMinute" />
                            @if (HasSeconds())
                            {
                                <MudWheel Class="mud-width-full" @bind-Value="_second" ItemCollection="Seconds" Sensitivity="@Sensitivity" Label="@(ShowHeader ? LocalizedStrings.Second : null)" ToStringFunc="new Func<int, string>(NumberToString)" Dense="@Dense" Color="@(ColorTime == Color.Inherit ? Color : ColorTime)" Disabled="FixSecond" />
                            }
                        }
                    </div>
                </MudPopover>
            </InputContent>
        </MudInputControl>
    </div>

</CascadingValue>
<!-- mousedown instead of click needed to close the menu before OnLostFocus runs -->
<MudOverlay Visible="_isOpen" @onmousedown="@(() => CloseMenu(SubmitOnClose))" LockScroll="@LockScroll" />
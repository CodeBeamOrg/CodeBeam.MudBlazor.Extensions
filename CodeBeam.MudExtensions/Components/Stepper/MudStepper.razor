@namespace MudExtensions
@inherits MudComponentBase
@using MudExtensions.Enums

<CascadingValue Value="this" IsFixed="true">
    <MudStack Row="Vertical">
        <MudStack Row="!Vertical" AlignItems="AlignItems.Center">
            @foreach (MudStep step in _steps)
            {
                if (step.IsResultStep)
                {
                    continue;
                }
                bool active = IsStepActive(step);
                <div @onclick="@(Linear ? null : () => SetActiveIndex(step))" Class="@HeaderClassname">
                    <MudAvatar Class="@((active || step.Status != StepStatus.Continued) ? $"mud-theme-{Color.ToDescriptionString()}" : null)" Variant="@Variant" Size="Size.Small">
                        @if (step.Status == Enums.StepStatus.Completed)
                        {
                            <MudIcon Icon="@Icons.Filled.Done" Size="Size.Small" />
                        }
                        else if (step.Status == StepStatus.Skipped)
                        {
                            <MudIcon Icon="@Icons.Filled.Remove" Size="Size.Small" />
                        }
                        else
                        {
                            @(Steps.IndexOf(step) + 1)
                        }
                    </MudAvatar>
                @if (DisableHeaderText == false || active)
                    {
                        <div>
                            <MudText Color="@(active ? Color : Color.Default)" Style="@(active ? "font-weight: 900" : null)">@step.Title</MudText>
                            @if (step.Optional == true)
                            {
                                <MudText Typo="Typo.subtitle2" Color="@(active ? Color : Color.Default)" Style="@(active ? "font-weight: 500" : null)">@LocalizedStrings.Optional</MudText>
                            }
                        </div>
                    }
                </div>

                if (_steps.Count - 1 != _steps.IndexOf(step))
                {
                    <span class="@(step.Status != StepStatus.Continued ? "mud-stepper-header-dash mud-stepper-header-dash-completed flex-grow-1 mx-auto" : "mud-stepper-header-dash flex-grow-1 mx-auto")"></span>
                }

            }
        </MudStack>
        <MudStack Justify="Justify.SpaceBetween" Style="min-height: 500px;">
            <div class="mud-stepper-ani">
                @ChildContent
            </div>
            
            <div class="d-flex gap-4">
                @if (ActionContent != null)
                {
                    @ActionContent
                }
                else if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued)
                {
                    <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Filled.ChevronLeft" OnClick="@(() => SetActiveIndex(-1))" />
                    <MudSpacer />
                    @if (Steps[ActiveIndex].Status == StepStatus.Completed)
                    {
                        <MudButton Color="@Color" Variant="@Variant" Disabled="true">@LocalizedStrings.Completed</MudButton>
                    }
                    else if (Steps[ActiveIndex].Status == StepStatus.Skipped)
                    {
                        <MudButton Color="@Color" Variant="@Variant" Disabled="true">@LocalizedStrings.Skipped</MudButton>
                    }
                    <MudIconButton Color="@Color" Variant="@Variant" Icon="@Icons.Filled.ChevronRight" OnClick="@(() => SetActiveIndex(1))" />
                }
                else if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Optional == true)
                {
                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SetActiveIndex(-1))">@LocalizedStrings.Previous</MudButton>
                    <MudSpacer />
                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SkipStep(ActiveIndex))">@LocalizedStrings.Skip</MudButton>
                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => CompleteStep(ActiveIndex))">@GetNextButtonString()</MudButton>
                }
                else
                {
                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => SetActiveIndex(-1))">@LocalizedStrings.Previous</MudButton>
                    <MudSpacer />
                    <MudButton Color="@Color" Variant="@Variant" OnClick="@(() => CompleteStep(ActiveIndex))">@GetNextButtonString()</MudButton>
                }
            </div>
        </MudStack>
    </MudStack>
</CascadingValue>

<MudAnimate @ref="_animate" Selector=".mud-stepper-ani" AnimationType="Enums.AnimationType.Fade" Value="1" Duration="0.7" />

@namespace MudExtensions
@typeparam T
@inherits MudComponentBase
@using MudBlazor
@using MudExtensions.Enums

<div @attributes="UserAttributes" id="@_elementId" class="@Classname" style="@Stylename" tabindex="-1" @onkeydown="HandleKeyDown" @onfocusout="HandleOnFocusOut">
    <CascadingValue Value="@this" IsFixed="true">
        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.Top && ParentList == null)
        {
            <MudListItemExtended T="T" IsFunctional="true" Icon="@SelectAllCheckBoxIcon" IconColor="@Color" Text="@SelectAllText" OverrideMultiSelectionComponent="MultiSelectionComponent.None" OnClick="@(() => SelectAllItems(_allSelected))" OnClickHandlerPreventDefault="true" Dense="@Dense" Class="mb-2" />
            <MudDivider />
        }
        
        @if (ItemCollection != null)
        {
            @if (SearchBox == true)
            {
                <MudListSubheaderExtended T="T" Style="position: sticky; top: -12px; background-color: var(--mud-palette-background); z-index: 10">
                    
                    <div @onkeydown:stopPropagation class="mud-list-item-extended">
                        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.BeforeSearch && ParentList == null)
                        {
                            <MudCheckBox CheckedIcon="@SelectAllCheckBoxIcon" Color="@Color" @bind-Checked="_allSelected" @onclick="() => SelectAllItems(_allSelected)" Dense="true" />
                        }
                        <MudTextField @bind-Value="@_searchString" Class="@ClassSearchBox" OnKeyUp="@(() => UpdateSelectedStyles())" Immediate="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconColor="Color" />
                        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.AfterSearch && ParentList == null)
                        {
                            <MudCheckBox CheckedIcon="@SelectAllCheckBoxIcon" Color="@Color" @bind-Checked="_allSelected" @onclick="() => SelectAllItems(_allSelected)" Dense="true" />
                        }
                    </div>

                </MudListSubheaderExtended>
            }
            <MudVirtualize IsEnabled="@Virtualize" Items="GetSearchedItems()" Context="item" OverscanCount="@OverscanCount">
                @if (MudSelectExtended != null)
                {
                    <MudSelectItemExtended Value="@item" Text="@(ToStringFunc == null ? item.ToString() : ToStringFunc(item))" />
                }
                else
                {
                    <MudListItemExtended Value="@item" Text="@(ToStringFunc == null ? item.ToString() : ToStringFunc(item))" />
                }
            </MudVirtualize>
        }
        else
        {
            @ChildContent
        }
        
        @if (MultiSelection && SelectAll && SelectAllPosition == SelectAllPosition.Bottom && ParentList == null)
        {
            <MudDivider />
            <MudListItemExtended T="T" IsFunctional="true" Icon="@SelectAllCheckBoxIcon" IconColor="@Color" Text="@SelectAllText" OverrideMultiSelectionComponent="MultiSelectionComponent.None" OnClick="@(() => SelectAllItems(_allSelected))" OnClickHandlerPreventDefault="true" Dense="@Dense" Class="mb-2" />
        }
    </CascadingValue>
</div>

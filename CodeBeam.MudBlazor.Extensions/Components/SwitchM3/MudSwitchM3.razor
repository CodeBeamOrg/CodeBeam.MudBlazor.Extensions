@namespace MudExtensions
@inherits MudBooleanInput<T>
@typeparam T

<label class="@Classname" style="@Style" @onkeydown="@HandleKeyDown" id="@_elementId">
    <span class="@SwitchSpanClassname">
        <span tabindex="0" class="@SwitchClassname">
            <span class="mud-switch-button-m3">
                <input tabindex="-1" @attributes="UserAttributes" aria-checked="@((BoolValue == true).ToString().ToLower())" aria-readonly="@(Disabled.ToString().ToLower())" type="checkbox" class="mud-switch-input-m3" checked="@BoolValue" @onchange="@OnChange" disabled="@Disabled" @onclick:preventDefault="@ReadOnly" />
                <span class="mud-switch-thumb-m3 @(BoolValue != true ? $"mud-switch-thumb-{Color.ToDescriptionString()}-m3" : null) @(string.IsNullOrEmpty(ThumbOffIcon) ? null : "mud-switch-thumb-off-icon-m3") d-flex align-center justify-center">
                    @if (!string.IsNullOrEmpty(ThumbIcon) && BoolValue == true)
                    {
                        <MudIcon Color="@Color" Icon="@ThumbIcon" Style="height:16px; width:16px;" />
                    }
                    else if (!string.IsNullOrEmpty(ThumbOffIcon) && BoolValue == false)
                    {
                        <MudIcon Icon="@ThumbOffIcon" Style="@IconStylename" />
                    }
                </span>
            </span>
        </span>
        <span class="@TrackClassname"></span>
    </span>
    @if (!String.IsNullOrEmpty(Label))
    {
        <MudText>@Label</MudText>
    }
    @if (ChildContent != null)
    {
        <MudText>
            @ChildContent
        </MudText>
    }
</label>

@code
{
    [Parameter]
    [Category(CategoryTypes.FormComponent.Behavior)]
    public RenderFragment ChildContent { get; set; }
}


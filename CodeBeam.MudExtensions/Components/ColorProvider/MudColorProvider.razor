@namespace MudExtensions
@using System.Text
@using MudExtensions.Enums
@using MudExtensions.Utilities
@inherits MudComponentBase

@code {

    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Primary { get; set; }

    string _secondary;
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Secondary { get; set; }

    string _tertiary;
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Tertiary { get; set; }

    /// <summary>
    /// If true, selected colors applies even the input does not have focus. Default is false.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public int MainTone { get; set; } = 40;

    /// <summary>
    /// If true, selected colors applies even the input does not have focus. Default is false.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public int ContainerTone { get; set; } = 90;

    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public bool DarkMode { get; set; }

    /// <summary>
    /// Supports id and class selection. Use "#idName" for id selectors (ex. <Component id="idName" />) or ".idName" for class selectors (ex. <Component Class="idName" />). Leave it null or empty to effect all scrollbars.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Selector { get; set; }

    /// <summary>
    /// If true, selected colors applies even the input does not have focus. Default is false.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public bool Always { get; set; }

    /// <summary>
    /// The base color that affects text, label and borders. Can be overrided with other color parameters. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string BaseColor { get; set; }

    /// <summary>
    /// The text color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string TextColor { get; set; }

    /// <summary>
    /// The label text color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string LabelColor { get; set; }

    /// <summary>
    /// The label background color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string LabelBackgroundColor { get; set; }

    /// <summary>
    /// The border color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string BorderColor { get; set; }

}

<style>
    :root {
        @for (int i = 10; i < 100; i = i + 10)
        {
            int a = i;
            @($"--mud-primary-{a}: {GetRGBString(Primary, a)};")
            @($"--mud-secondary-{a}: {GetRGBString(Secondary, a)};")
            @($"--mud-tertiary-{a}: {GetRGBString(Tertiary, a)};")
        } 
        @($"--mud-primary-{MainTone}: {GetRGBString(Primary, MainTone)};") 
        @($"--mud-secondary-{MainTone}: {GetRGBString(Secondary, MainTone)};") 
        @($"--mud-tertiary-{MainTone}: {GetRGBString(Tertiary, MainTone)};") 
        @($"--mud-primary-{ContainerTone}: {GetRGBString(Primary, ContainerTone)};") 
        @($"--mud-secondary-{ContainerTone}: {GetRGBString(Secondary, ContainerTone)};") 
        @($"--mud-tertiary-{ContainerTone}: {GetRGBString(Tertiary, ContainerTone)};") 
        @($"--mud-primary-{100 - ContainerTone}: {GetRGBString(Primary, 100 - ContainerTone)};") 
        @($"--mud-secondary-{100 - ContainerTone}: {GetRGBString(Secondary, 100 - ContainerTone)};") 
        @($"--mud-tertiary-{100 - ContainerTone}: {GetRGBString(Tertiary, 100 - ContainerTone)};") 
        @($"--mud-primary-99: {GetRGBString(Primary, 99)};")
        @($"--mud-secondary-99: {GetRGBString(Secondary, 99)};")
        @($"--mud-tertiary-99: {GetRGBString(Tertiary, 99)};")
        --mud-primary-0: rgb(0, 0, 0);
        --mud-primary-100: rgb(255, 255, 255);
        --mud-secondary-0: rgb(0, 0, 0);
        --mud-secondary-100: rgb(255, 255, 255);
        --mud-tertiary-0: rgb(0, 0, 0);
        --mud-tertiary-100: rgb(255, 255, 255);

        --mud-m3-primary: var(--mud-primary-@($"{MainTone.ToString()}"));
        --mud-m3-primary-container: var(--mud-primary-@($"{ContainerTone.ToString()}"));
        --mud-m3-onprimary: var(--mud-primary-@(DarkMode ? "0" : "100"));
        --mud-m3-onprimary-container: var(--mud-primary-@($"{100 - ContainerTone}"));

        --mud-m3-secondary: var(--mud-secondary-@($"{MainTone.ToString()}"));
        --mud-m3-secondary-container: var(--mud-secondary-@($"{ContainerTone.ToString()}"));
        --mud-m3-onsecondary: var(--mud-secondary-@(DarkMode ? "0" : "100"));
        --mud-m3-onsecondary-container: var(--mud-secondary-@($"{100 - ContainerTone}"));

        --mud-m3-tertiary: var(--mud-tertiary-@($"{MainTone.ToString()}"));
        --mud-m3-tertiary-container: var(--mud-tertiary-@($"{ContainerTone.ToString()}"));
        --mud-m3-ontertiary: var(--mud-tertiary-@(DarkMode ? "0" : "100"));
        --mud-m3-ontertiary-container: var(--mud-tertiary-@($"{100 - ContainerTone}"));
    }
</style>

@*<style>
    @if (!string.IsNullOrEmpty(BaseColor))
    {
        @($"{Selector} .mud-input-root {{ color: {BaseColor} !important; }}")
        @if (Always)
        {
            @($"{Selector} .mud-input-underline:after, {Selector} .mud-input-underline:before {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-outlined-border {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-underline:hover:before {{ opacity: 0.6; }}")
            @($"{Selector} .mud-input-label {{ color: {BaseColor} !important; }}")
            @($"{Selector}:focus-within .mud-input-label {{ color: {BaseColor} !important; font-weight: 900 }}")
        }
        else
        {
            @($"{Selector} .mud-input-underline:after {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-outlined:focus-within .mud-input-outlined-border {{ border-color: {BaseColor} !important; }}")
            @($"{Selector}:focus-within .mud-input-label {{ color: {BaseColor} !important; }}")
        }
    }
    @if (!string.IsNullOrEmpty(TextColor))
    {
        @($"{Selector} .mud-input-root {{ color: {TextColor} !important; }}")
    }
    @if (!string.IsNullOrEmpty(LabelColor))
    {
        if (Always)
        {
            @($"{Selector} .mud-input-label {{ color: {LabelColor} !important; }}")
            @($"{Selector}:focus-within .mud-input-label {{ color: {LabelColor} !important; font-weight: 900 }}")
        }
        else
        {
            @($"{Selector}:focus-within .mud-input-label {{ color: {LabelColor} !important; }}")
        }
    }
    @if (!string.IsNullOrEmpty(LabelBackgroundColor))
    {
        @($"{Selector} .mud-input-label {{ background-color: {LabelBackgroundColor} !important; }}")
    }
    @if (!string.IsNullOrEmpty(BorderColor))
    {
        if (Always)
        {
            @($"{Selector} .mud-input-underline:after, {Selector} .mud-input-underline:before {{ border-color: {BorderColor} !important; }}")
            @($"{Selector} .mud-input-outlined-border {{ border-color: {BorderColor} !important; }}")
            @($"{Selector} .mud-input-underline:hover:before {{ opacity: 0.6; }}")
        }
        else
        {
            <MudRender>@(Selector) .mud-input-underline:after {
                @($"border-color: {BorderColor} !important;");
            }</MudRender>
            <MudRender>@(Selector) .mud-input-outlined:focus-within .mud-input-outlined-border {
                @($"border-color: {BorderColor} !important;");
            }</MudRender>
        }
    }
</style>*@
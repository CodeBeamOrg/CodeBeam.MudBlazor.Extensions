@page "/"
@namespace ComponentViewer.Docs.Pages
@using MudExtensions.Enums
@using ComponentViewer.Docs.Shared

@inject IScrollManager ScrollManager

<MudScrollbar Width="8" Color="primary" HoverColor="secondary" />
<MudScrollToTop>
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowUpward" />
</MudScrollToTop>

<MudAnimate @ref="_animate" Selector=".card-blur" AnimationType="AnimationType.Blur" Duration="0.3" Value="0" ValueSecondary="120" />
<MudInputStyler Selector=".search-style" BaseColor="var(--mud-palette-secondary)" />

<MudContainer Class="d-flex flex-column align-center justify-start pa-4 top-container" MaxWidth="MaxWidth.False">
    <div class="d-flex align-baseline justify-center mt-6" @onmouseenter="@(() => _hover = true)" @onmouseleave="@(() => _hover = false)">
        <MudText Class="slogan" Align="Align.Center">The</MudText>
        <MudText Class="slogan" Align="Align.Center" Color="Color.Primary">Mud</MudText>
        <MudText Class="slogan2" Align="Align.Center" Color="Color.Secondary">@GetSloganText()</MudText>
    </div>
    <div class="d-flex align-baseline gap-2 justify-center mt-n2 mb-4">
        <MudText Class="slogan3" Align="Align.Center">by</MudText>
        <MudLink Class="slogan3" Href="https://github.com/CodeBeamOrg" Target="_blank" Color="Color.Info" Underline="Underline.Hover">CodeBeam</MudLink>
    </div>

    <div class="d-flex align-baseline gap-2 justify-center mt-4 mb-16 mud-width-full">
        <MudButton Href="https://github.com/CodeBeamOrg/CodeBeam.MudBlazor.Extensions" Target="_blank" Color="Color.Secondary" Variant="Variant.Outlined"><MudText>GitHub</MudText></MudButton>
        <MudButton Href="https://trymudextensions.pages.dev/" Target="_blank" Color="Color.Secondary" Variant="Variant.Outlined"><MudText Align="Align.Center">Try MudExtensions</MudText></MudButton>
        <MudButton Href="https://www.nuget.org/packages/CodeBeam.MudBlazor.Extensions" Target="_blank" Color="Color.Secondary" Variant="Variant.Outlined"><MudText>NuGet</MudText></MudButton>
    </div>

    <div class="d-flex justify-center my-4">
        <MudTextFieldExtended T="string" @bind-Value="_searchString" @bind-Value:after="@(() => _animate.Refresh())" Class="search-style" Style="width: calc(50px + 50vw)" Placeholder="What are you looking for?" Variant="Variant.Outlined" Clearable="true" />
    </div>

    @if (string.IsNullOrEmpty(_searchString) == true)
    {
        <div class="d-flex align-baseline gap-2 justify-center mt-16 mb-8 card-blur">
            <MudGrid Class="justify-center">
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ComponentCard Title="Extended Components" Description="Known Mud components with new features added while keeping all existing features." ShowActionButton="false" NavigateToComponentPage="false" />
                </MudItem>

                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ComponentCard Title="Unique Components" Description="New Mud components that Mud Core doesn't have." ShowActionButton="false" NavigateToComponentPage="false" />
                </MudItem>

                <MudItem xs="12" sm="6" md="4" lg="3">
                    <ComponentCard Title="Be a Sponsor" Description="You can help the basic expenses of the project." ShowActionButton="false" ComponentName="BeASponsor" />
                </MudItem>
            </MudGrid>
        </div>

        <div class="d-flex justify-center mt-12">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Style="height: 52px;" Color="Color.Secondary" Variant="Variant.Outlined" OnClick="@(async() => await ScrollManager.ScrollToAsync("cont", 0, 1600, ScrollBehavior.Smooth))" />
        </div>
    }
    else
    {
        if (NothingFound())
        {
            <MudText Class="card-blur">Nothing Found. Try Something Else?</MudText>
        }
        <MudGrid Class="justify-center">
            @foreach (var comp in _extendedComponents)
            {
                if (string.IsNullOrEmpty(_searchString) || comp.Item1.Contains(_searchString, StringComparison.CurrentCultureIgnoreCase))
                {
                    <MudItem Class="card-blur" xs="12" sm="6" md="4" lg="3" xl="2">
                        <ComponentCard Title="@comp.Item1"
                           Description="@comp.Item2" />
                    </MudItem>
                }
            }

            @foreach (var comp in _uniqueComponents)
            {
                if (string.IsNullOrEmpty(_searchString) || comp.Item1.Contains(_searchString, StringComparison.CurrentCultureIgnoreCase))
                {
                    <MudItem Class="card-blur" xs="12" sm="6" md="4" lg="3" xl="2">
                        <ComponentCard Title="@comp.Item1"
                           Description="@comp.Item2" />
                    </MudItem>
                }
            }
        </MudGrid>
    }

    @if (string.IsNullOrEmpty(_searchString))
    {
        <div class="mt-16 mb-8">
            <MudText Color="Color.Secondary" Typo="Typo.h6" Align="Align.Center"><b>Extended Components</b></MudText>
            <MudText Color="Color.Secondary" Typo="Typo.body1" Align="Align.Center">Known Mud Components with extended features</MudText>
        </div>

        <MudGrid Class="justify-center">
            @foreach (var comp in _extendedComponents)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <ComponentCard Title="@comp.Item1"
                           Description="@comp.Item2" />
                </MudItem>
            }
        </MudGrid>

        <div class="mt-16 mb-8">
            <MudText Color="Color.Secondary" Typo="Typo.h6" Align="Align.Center"><b>Unique Components</b></MudText>
            <MudText Color="Color.Secondary" Typo="Typo.body1" Align="Align.Center">Extension components that written from scratch</MudText>
        </div>

        <MudGrid>
            @foreach (var comp in _uniqueComponents)
            {

                <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                    <ComponentCard Title="@comp.Item1"
                           Description="@comp.Item2" />
                </MudItem>

            }

            <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
                <ComponentCard Title="API"
                           Description="A basic API list for all components." />
            </MudItem>

        </MudGrid>
    }
</MudContainer>

<style>
    .slogan {
        color: var(--mud-palette-text-primary);
        font-size: calc(16px + 6vw);
        font-weight: 900;
        font-family: "Roboto";
        letter-spacing: 0;
        transition: all 1s;
        user-select: none;
    }

        .slogan:hover {
            letter-spacing: calc(4px + 2vw);
        }

    .slogan2 {
        color: var(--mud-palette-text-primary);
        font-size: calc(16px + 6vw);
        font-weight: 900;
        font-family: "Roboto";
        letter-spacing: 0;
        transition: all 1s;
        user-select: none;
    }

        .slogan2:hover {
            letter-spacing: calc(2px + 1vw);
        }

    .top-container {
        min-height: 100vh;
        background-color: var(--mud-palette-background-grey);
        overflow: hidden;
    }

    .slogan3 {
        color: var(--mud-palette-text-primary);
        font-size: 24px;
        font-weight: 300;
    }
</style>

@code {
    [CascadingParameter]
    MainLayout MainLayout { get; set; }

    MudAnimate _animate;

    bool _hover = false;
    string _searchString;

    private string GetSloganText()
    {
        if (_hover)
        {
            return "Extension";
        }
        else
        {
            return "Secondary";
        }
    }

    private bool NothingFound()
    {
        if (_extendedComponents.Select(x => x.Item1).ToList().Any(x => x.Contains(_searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return false;
        }

        if (_uniqueComponents.Select(x => x.Item1).ToList().Any(x => x.Contains(_searchString, StringComparison.CurrentCultureIgnoreCase)))
        {
            return false;
        }

        return true;
    }

    List<Tuple<string, string>> _extendedComponents = new()
    {
        new("MudListExtended", "The extended MudList component."),
        new("MudSelectExtended", "The extended MudSelect component."),
        new("MudTextFieldExtended", "The extended MudTextField component."),
    };

    List<Tuple<string, string>> _uniqueComponents = new()
    {
        new("MudAnimate", "A revolutionary next generation animate component."),
        new("MudBarcode", "A QR and barcode viewer with defined value."),
        new("MudChipField", "A textfield with returns chips with defined delimiter."),
        new("MudCodeInput", "A group of textfields that each one can contain a char."),
        new("MudColorProvider", "An extension for primary, secondary and tertiary colors to support Material 3."),
        new("MudCombobox", "Unites MudSelect and MudAutocomplete features."),
        new("MudCssManager", "Get and set component's css property."),
        new("MudCsvMapper", "A .csv file uploader that matches the .csv file headers to supplied / expected headers."),
        new("MudDateWheelPicker", "A date time picker with MudWheels."),
        new("MudGallery", "Mobile friendly image gallery component."),
        new("MudInputStyler", "Applies CSS colors easily for mud inputs like MudTextField and MudSelect."),
        new("MudLoading", "Loading indicator for a whole page or a specific component."),
        new("MudLoadingButton", "A classic MudButton with loading improvements."),
        new("MudPage", "A CSS grid layout component that builds columns and rows, supports ColSpan & RowSpan."),
        new("MudPasswordField", "A specialized textfield that designed for working easily with passwords."),
        new("MudPopup", "A mobile friendly popup content for several situations."),
        new("MudScrollbar", "Handle all or selected scrollbar styles with a Mud component."),
        new("MudSpeedDial", "An expandable fab component."),
        new("MudSplitter", "A resizeable content splitter."),
        new("MudStepper", "A wizard-like steps to control the flow with rich options."),
        new("MudSwitchM3", "Material 3 switch component that has all MudBlazor features."),
        new("MudTeleport", "Teleport the content to the specified parent and not follow the DOM hierarchy."),
        new("MudTransferList", "A component that has 2 lists that transfer items to another."),
        new("MudWatch", "A performance optimized watch to show current time or show stopwatch or countdown."),
        new("MudWheel", "Smoothly changes values in a wheel within defined ItemCollection."),
    };
}

@namespace MudExtensions
@using MudExtensions.Enums;
@typeparam T
@inherits MudBaseInputExtended<T>

<CascadingValue Name="Standalone" Value="false" IsFixed="true">
    <CascadingValue Value="@this" IsFixed="true">
        <div class="mud-select-extended" id="@_elementId">
            <MudInputControl Label="@Label" Variant="@Variant" HelperText="@HelperText" HelperTextOnFocus="@HelperTextOnFocus" FullWidth="@FullWidth" Margin="@Margin" Class="@Classname" Style="@Style"
                             Error="@Error" ErrorText="@ErrorText" ErrorId="@ErrorId" Disabled="@Disabled" @onmousedown="@ToggleMenu" Required="@Required" ForId="@FieldId">
                <InputContent>
                    @*DataVisualiserStyle="@($"min-height: 1.1876em;{(HasValue(Value) && Editable == true ? "padding-bottom: 0px" : null)}")"*@
                    <MudInputExtended @ref="_inputReference" T="string" InputType="@(Editable && MultiSelection == false ? InputType.Text : InputType.Hidden)"
                                      Class="@InputClassname" Style="@InputStyle" Margin="@Margin" Placeholder="@Placeholder"
                                      Variant="@Variant" Immediate="true"
                                      TextUpdateSuppression="false"
                                      ShowVisualiser="@((MultiSelection && SelectedValues.Any()) || !Editable)" DataVisualiserStyle="min-height: 1.1876em"
                                      @bind-Value="@_searchString"
                                      DisableUnderLine="@DisableUnderLine"
                                      Disabled="@Disabled" ReadOnly="@ReadOnly" Error="@Error" ErrorId="@ErrorId"
                                      Clearable="@Clearable" ForceClearable="@(Clearable && HasValue(Value))" OnClearButtonClick="@ClearButtonClickHandlerAsync"
                                      @attributes="UserAttributes" OnBlur="@HandleOnBlur" ForceShrink="@(HasValue(Value) || _isOpen || ForceShrink)">

                        <AdornmentEnd>
                            <MudIcon Icon="@_currentIcon" Color="@AdornmentColor" Size="@IconSize" @onclick="OnAdornmentClick" />
                        </AdornmentEnd>

                        <DataVisualiser>
                            <div style="flex-basis: content; flex-grow: 0">
                                @if (HasValue(Value) == false && string.IsNullOrEmpty(Placeholder) == false)
                                {
                                    <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                }
                                else if (InputPresenter == ValuePresenter.Chip)
                                {
                                    <MudChipSet Class="d-flex flex-wrap mud-width-full" AllClosable="ChipCloseable" OnClose="ChipClosed">
                                        @foreach (var item in Items?.Where(x => (MultiSelection ? SelectedValues.Contains(x.Value) : Value?.Equals(x.Value) == true)) ?? new List<MudComboBoxItem<T>>())
                                        {
                                            <MudChip Class="@ChipClass" Value="item.Value" Text="@(ToStringFunc != null ? ToStringFunc.Invoke(item.Value) : string.IsNullOrEmpty(item.Text) ? Converter.Set(item.Value) : item.Text)" Color="@Color" Size="@ChipSize" Variant="@ChipVariant" @onmousedown:stopPropagation />
                                        }
                                        @*@if (ItemCollection != null)
                                    {
                                    foreach (var item in ItemCollection.Where(x => SelectedValues.Contains(x)))
                                    {
                                    <MudChip Class="@ChipClass" Value="@item" Text="@Converter.Set(item)" Color="@Color" Size="@ChipSize" Variant="@ChipVariant" @onmousedown:stopPropagation />
                                    }
                                    }
                                    else
                                    {
                                    foreach (var item in Items?.Where(x => (MultiSelection ? SelectedValues.Contains(x.Value) : Value?.Equals(x.Value) == true)) ?? new List<MudComboboxItem<T>>())
                                    {
                                    <MudChip Class="@ChipClass" Value="item.Value" Text="@(ToStringFunc != null ? ToStringFunc.Invoke(item.Value) : string.IsNullOrEmpty(item.Text) ? Converter.Set(item.Value) : item.Text)" Color="@Color" Size="@ChipSize" Variant="@ChipVariant" @onmousedown:stopPropagation />
                                    }
                                    }*@
                                    </MudChipSet>
                                }
                                else if (InputPresenter == ValuePresenter.Text && (Editable == false || (MultiSelection == true && Editable == true)))
                                {
                                    <div style="white-space: break-spaces">@_dataVisualiserText</div>
                                }
                                else if (InputPresenter == ValuePresenter.ItemContent)
                                {
                                    if (SelectedValues == null)
                                    {
                                        <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>

                                    }
                                    else if (ItemTemplate != null)
                                    {
                                        if (Value != null)
                                        {
                                            @ItemTemplate(Items.FirstOrDefault(x => x.Value.Equals(Value)))
                                        }
                                        else if (!string.IsNullOrEmpty(Placeholder))
                                        {
                                            <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                        }
                                    }
                                    else if (Items.FirstOrDefault(x => x.Value.Equals(Value))?.ChildContent != null)
                                    {
                                        if (MultiSelection)
                                        {
                                            @foreach (var item in Items.Where(x => SelectedValues.Contains(x.Value)))
                                            {
                                                <MudRender>@item.ChildContent</MudRender>
                                            }
                                        }
                                        else
                                        {
                                            <MudRender>@Items.FirstOrDefault(x => x.Value.Equals(Value))?.ChildContent</MudRender>
                                        }

                                    }
                                    else
                                    {
                                        <MudRender>@GetPresenterText()</MudRender>
                                    }
                                }
                            </div>
                        </DataVisualiser>
                        <ChildContent>
                            <div class="@TemplateClass">
                                @if (HasValue(Value) == false && string.IsNullOrEmpty(Placeholder) == false)
                                {
                                    <MudText Typo="Typo.body1" Class="mud-text-secondary">@Placeholder</MudText>
                                }
                            </div>
                        </ChildContent>

                    </MudInputExtended>

                    <MudPopover Open="true" MaxHeight="@MaxHeight" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" OverflowBehavior="OverflowBehavior.FlipAlways" Class="@PopoverClassname" RelativeWidth="@RelativeWidth">
                        <CascadingValue Value="@this" IsFixed="true">
                            <div id="@_popoverId" style="@($"overflow-y: auto; max-height: {MaxHeight}px")">
                                @PopoverStartContent
                                @if (MultiSelection)
                                {
                                    <div Style="position: sticky; top: 0px; background-color: var(--mud-palette-background); z-index: 2" @onkeydown:stopPropagation>
                                        @if (Editable)
                                        {
                                            <div class="pa-2">
                                                <MudTextFieldExtended id="@($"{_elementId}-autocomplete")" @ref="@_searchbox" T="string" @bind-Value="@_searchString" Margin="Margin.Dense"
                                                                      Variant="Variant.Outlined" Immediate="true" OnKeyDown="@SearchBoxHandleKeyDown" OnKeyUp="@SearchBoxHandleKeyUp" Clearable="@SearchBoxClearable">
                                                    <AdornmentEnd>
                                                        <MudIcon Icon="@Icons.Material.Filled.Search" Color="@Color" />
                                                    </AdornmentEnd>
                                                </MudTextFieldExtended>
                                            </div>
                                        }

                                        @if (SelectAll)
                                        {
                                            <div class="@($"mud-combobox-item mud-combobox-item-clickable mud-combobox-item-{Dense.ToDescriptionString()} mud-ripple d-flex")" @onclick="SelectAllItems" @onclick:stopPropagation="true">
                                                <MudCheckBox Class="mx-4" @bind-Checked="@_allSelected" Color="@Color" @onclick="@SelectAllItems" Dense="true" />
                                                <MudText Typo="GetTypo()">@SelectAllText</MudText>
                                            </div>
                                            <MudDivider />
                                        }
                                    </div>
                                }

                                @ChildContent
                                @if (NoItemsContent != null && !HasEligibleItems())
                                {
                                    <div class="pa-2">
                                        @NoItemsContent
                                    </div>
                                }
                                @PopoverEndContent
                            </div>
                        </CascadingValue>
                    </MudPopover>
                </InputContent>
            </MudInputControl>
        </div>
    </CascadingValue>

</CascadingValue>
<!-- mousedown instead of click needed to close the menu before OnLostFocus runs -->
<MudOverlay Visible="@_isOpen" @onmousedown="@CloseMenu" LockScroll="@LockScroll" />

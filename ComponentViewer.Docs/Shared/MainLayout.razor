@namespace ComponentViewer.Docs.Shared
@inherits LayoutComponentBase

<style>
    @(_fontPicker?.ImportFontStyleText(font))
</style>

<MudLayout>
    <MudAppBar Class="background-gradient-animation mud-width-full" Style="background: linear-gradient(-45deg, var(--mud-palette-info), var(--mud-palette-primary), var(--mud-palette-secondary), var(--mud-palette-primary)); background-size: 400% 400%; position: relative; overflow-x: hidden">
        <MudStack Class="mud-width-full" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="4">
            <MudIconButton Class="white-text" Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Href="https://mudblazor.com/" Target="_blank" />
            <MudText Style="font-weight: 900; color: white">CodeBeam MudExtensions</MudText>
            <div class="d-flex">
                <MudToggleIconButton @bind-Toggled="_isDarkMode" Class="white-text" Icon="@Icons.Filled.DarkMode" ToggledIcon="@Icons.Filled.LightMode"/>
                    <MudIconButton Class="white-text" Icon="@Icons.Filled.Settings" OnClick="@ToggleOpen"/>
                <MudPopover Class="pa-4" Open="_open" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.BottomRight" Style="width: 320px; height: 400px">
                    <MudStack Justify="Justify.SpaceBetween">
                    <MudSwitchM3 @bind-Checked="_showFontPicker" Color="Color.Secondary" Label="Font Picker"/>
                    <MudButton Class="mud-width-full" Style="bottom: 0;" OnClick="@ToggleOpen">Close</MudButton>
                    </MudStack>
                </MudPopover>
            </div>
        </MudStack>
    </MudAppBar>
    <MudMainContent Class="pt-0">
        @if (_showFontPicker)
        {
            <div class="pa-4">
                <MudFontPicker @ref="@_fontPicker" Label="Font Picker" StaticInputText="true" FontChanged="FontChanged" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" Clearable="true" MaxItems="null"/>
            </div>
        }
        @Body
    </MudMainContent>
</MudLayout>

<style>
    .appbar-style {
        background: var(--mud-palette-secondary) !important;
        transition: background-color .6s;
    }
    
    .appbar-style:hover {
        background: linear-gradient(to right, var(--mud-palette-primary) , var(--mud-palette-secondary)) !important;
    }

    .appbar-style .reverse-color {
        color: var(--mud-palette-primary) !important;
        transition: background-color .6s;
    }

        .appbar-style:hover .reverse-color {
            color: var(--mud-palette-secondary) !important;
        }
</style>


<MudThemeProvider Theme="_theme" @bind-IsDarkMode="_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />


@code {
    MudFontPicker _fontPicker;
    string font = "Roboto";
    bool _isDarkMode = false;
    bool _open = false;
    bool _showFontPicker = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (_fontPicker != null)
            {
                _fontPicker.Font = "Roboto";
                FontChanged();
            }
        }
    }

    MudTheme _theme = new MudTheme()
        {
            LayoutProperties = new LayoutProperties()
            {
                DefaultBorderRadius = "20px"
            },
        };

    private void FontChanged()
    {
        font = _fontPicker?.Font;

        if (font != null)
        {
            _theme = new MudTheme()
                {
                    LayoutProperties = new LayoutProperties()
                    {
                        DefaultBorderRadius = "20px"
                    },

                    Typography = new Typography()
                    {
                        Default = new Default()
                        {
                            FontFamily = new[] { font, "Roboto", "Poppins", "Helvetica", "sans-serif" }
                        },
                    }
                };
        }


        StateHasChanged();
    }

    private void ToggleOpen()
    {
        _open = !_open;
    }
}

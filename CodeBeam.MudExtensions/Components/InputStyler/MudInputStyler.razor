@namespace MudExtensions
@using System.Text
@using MudExtensions.Enums
@using MudExtensions.Utilities
@inherits MudComponentBase

@code{

    /// <summary>
    /// Supports id and class selection. Use "#idName" for id selectors (ex. <Component id="idName" />) or ".idName" for class selectors (ex. <Component Class="idName" />). Leave it null or empty to effect all scrollbars.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public string Selector { get; set; }

    /// <summary>
    /// If true, selected colors applies even the input does not have focus. Default is false.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Behavior)]
    public bool Always { get; set; }

    /// <summary>
    /// The base color that affects text, label and borders. Can be overrided with other color parameters. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string BaseColor { get; set; }

    /// <summary>
    /// The text color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string TextColor { get; set; }

    /// <summary>
    /// The label style. Add !important if style doesn't applied.
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string LabelStyle { get; set; }

    /// <summary>
    /// The label text color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string LabelColor { get; set; }

    /// <summary>
    /// The label background color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string LabelBackgroundColor { get; set; }

    /// <summary>
    /// The border color. Supports hex values "#ffffff", valid keywords "blue" and CSS variables "var(--mud-palette-primary)"
    /// </summary>
    [Parameter]
    [Category(CategoryTypes.Item.Appearance)]
    public string BorderColor { get; set; }

}

<style>
    @if (!string.IsNullOrEmpty(BaseColor))
    {
        @($"{Selector} .mud-input-root {{ color: {BaseColor} !important; }}")

        @if (Always)
        {
            @($"{Selector} .mud-input-underline:after, {Selector} .mud-input-underline:before {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-outlined-border {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-underline:hover:before {{ opacity: 0.6; }}")

            @($"{Selector} .mud-input-label {{ color: {BaseColor} !important; }}")
            @($"{Selector}:focus-within .mud-input-label {{ color: {BaseColor} !important; font-weight: 900 }}")
        }
        else
        {
            @($"{Selector} .mud-input-underline:after {{ border-color: {BaseColor} !important; }}")
            @($"{Selector} .mud-input-outlined:focus-within .mud-input-outlined-border {{ border-color: {BaseColor} !important; }}")

            @($"{Selector}:focus-within .mud-input-label {{ color: {BaseColor} !important; }}")
        }
    }

    @if (!string.IsNullOrEmpty(TextColor))
    {
        @($"{Selector} .mud-input-root {{ color: {TextColor} !important; }}")
    }

    @if (!string.IsNullOrEmpty(LabelColor))
    {
        if (Always)
        {
            @($"{Selector} .mud-input-label {{ color: {LabelColor} !important; }}")
            @($"{Selector}:focus-within .mud-input-label {{ color: {LabelColor} !important; font-weight: 900 }}")
        }
        else
        {
            @($"{Selector}:focus-within .mud-input-label {{ color: {LabelColor} !important; }}")
        }
    }

    @if (!string.IsNullOrEmpty(LabelBackgroundColor))
    {
        @($"{Selector} .mud-input-label {{ background-color: {LabelBackgroundColor} !important; }}")
    }

    @if (!string.IsNullOrEmpty(BorderColor))
    {
        if (Always)
        {
            @($"{Selector} .mud-input-underline:after, {Selector} .mud-input-underline:before {{ border-color: {BorderColor} !important; }}")
            @($"{Selector} .mud-input-outlined-border {{ border-color: {BorderColor} !important; }}")
            @($"{Selector} .mud-input-underline:hover:before {{ opacity: 0.6; }}")
        }
        else
        {
            <MudRender>@(Selector) .mud-input-underline:after {
                @($"border-color: {BorderColor} !important;");
            }</MudRender>

            <MudRender>@(Selector) .mud-input-outlined:focus-within .mud-input-outlined-border {
                @($"border-color: {BorderColor} !important;");
            }</MudRender>
        }
    }

    @($"{Selector} .mud-input-label {{ {LabelStyle} }}")
</style>
